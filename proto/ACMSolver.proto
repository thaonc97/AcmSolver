syntax = "proto3";

package ACMSolver;

message ASCampaign {
    string problem_id = 1;
    int32 original_campaign_id = 2;
    bool is_network = 10;
    int32 start_date = 3;
    int32 expired_date = 4;
    int32 priority = 5;
    int32 type = 6;           
    int32 total = 7;
    repeated int32 place_ids = 8 [packed =true];
    map<int32,int32> weights = 9;
    //WARING!!! THIEU PROFILES
    //WARING!!! THIEU PROFILES
    //WARING!!! THIEU PROFILES
    //WARING!!! THIEU PROFILES
    //WARING!!! THIEU PROFILES
    //WARING!!! THIEU PROFILES
}

message ASPlaceStat {
    string problem_id = 1;
    int32 original_place_id = 2;
    map<string, float> ctrs  = 3;
    repeated ProfileType profiles_ratio = 4;
    repeated int32 estimate_views = 5 [packed = true];
}

message ProfileType {
    int32 type = 1;
    repeated float details = 2 [packed = true ];
}

message ASResult {
    string problem_id = 1;
    int32 campaign_id = 2;
    int32 date = 3;
    int64 place_id = 4;
    float view = 5;
}

message SetResult{
    bool set_result = 1;
}

message ShareRate {
    string problem_id =1;
    float r = 2;
}

service ACMSolver{
    rpc SetPlaces(stream ASPlaceStat) returns (SetResult) {} ;          //2
    rpc SetShareRate(ShareRate) returns (SetResult) {};                 //5
    rpc SetCampaign(stream ASCampaign) returns (SetResult) {};          //3
    rpc SetNetworkCampaign(stream ASCampaign) returns (SetResult) {};   //4
}

